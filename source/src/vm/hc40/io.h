/*
	EPSON HC-40 Emulator 'eHC-40'
	Skelton for retropc emulator

	Author : Takeda.Toshiya
	Date   : 2008.02.23 -

	[ i/o ]
*/

#ifndef _IO_H_
#define _IO_H_

#include "../vm.h"
#include "../../emu.h"
#include "../device.h"

#define SIG_IO_DREC	0
#define SIG_IO_ART	1

#define EVENT_FRC	0
#define EVENT_ONESEC	1
#define EVENT_ART	2

static const int key_tbl[256] = {
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x56,0x57,0xff,0xff,0xff,0x71,0xff,0xff,
	0xb3,0xb2,0xff,0x10,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff,
	0x73,0xff,0xff,0xff,0xff,0x63,0x55,0x65,0x64,0xff,0xff,0xff,0xff,0x80,0x81,0xff,
	0x52,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x50,0x51,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0x66,0x40,0x76,0x30,0x22,0x31,0x32,0x33,0x27,0x34,0x35,0x36,0x42,0x41,0x60,
	0x61,0x20,0x23,0x67,0x24,0x26,0x77,0x21,0x75,0x25,0x74,0xff,0xff,0xff,0xff,0xff,
	0x52,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x50,0x51,0xff,0xff,0xff,0xff,0xff,0xff,
	0x03,0x04,0x05,0x06,0x07,0xff,0xff,0xff,0xff,0xff,0x01,0x02,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x70,0x37,0x43,0x53,0x44,0x45,
	0x62,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x46,0x72,0x47,0x54,0xff,
	0xff,0xff,0x72,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
};

class FIFO;

class IO : public DEVICE
{
private:
	DEVICE *d_cpu, *d_mem, *d_art, *d_beep, *d_drec;
	int did_art, did_beep, did_mic, did_rmt;
	uint8* ram;
	
	// registers
	void update_intr();
	uint32 cur_clock;
	uint8 bcr, slbcr;
	uint8 isr, ier;
	uint8 bankr;
	uint8 ioctlr;
	uint32 icrc, icrb;
	bool ear;
	uint8 vadr, yoff;
	
	// sub cpu
	void send_to_7508(uint8 val);
	uint8 rec_from_7508();
	FIFO *cmd_buf, *rsp_buf;
	// one sec interrupt
	bool onesec_intr, onesec_intr_enb;
	// alarm
	bool alarm_intr, alarm_intr_enb;
	uint8 alarm[6];
	// keyboard
	void update_key(int code);
	FIFO *key_buf;
	bool kb_intr_enb;
	bool kb_rep_enb, kb_caps;
	uint8 kb_rep_spd1, kb_rep_spd2;
	// art
	FIFO *art_buf;
	uint8 artsr, artdir;
	bool txen, rxen, dsr;
	int regist_id;
	// beep
	bool beep;
	// reset
	bool res_z80, res_7508;
	
	// externam ram disk
	uint8 ext[0x40000];
	uint32 extar;
	uint8 extcr;
	
	// display
	scrntype pd, pb;
	
public:
	IO(VM* parent_vm, EMU* parent_emu) : DEVICE(parent_vm, parent_emu) {}
	~IO() {}
	
	// common functions
	void initialize();
	void release();
	void reset();
	void sysreset();
	void write_signal(int id, uint32 data, uint32 mask);
	void event_frame();
	void event_callback(int event_id, int err);
	void write_io8(uint32 addr, uint32 data);
	uint32 read_io8(uint32 addr);
	uint32 intr_ack();
	
	// unique functions
	void set_context_cpu(DEVICE* device) {
		d_cpu = device;
	}
	void set_context_mem(DEVICE* device, uint8* ptr) {
		d_mem = device;
		ram = ptr;
	}
	void set_context_art(DEVICE* device, int id) {
		d_art = device;
		did_art = id;
	}
	void set_context_beep(DEVICE* device, int id) {
		d_beep = device;
		did_beep = id;
	}
	void set_context_drec(DEVICE* device, int id_mic, int id_rmt) {
		d_drec = device;
		did_mic = id_mic;
		did_rmt = id_rmt;
	}
	void draw_screen();
	void key_down(int code);
	void key_up(int code);
};

#endif
