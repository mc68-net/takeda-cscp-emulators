/*
	SHARP MZ-5500 Emulator 'EmuZ-5500'

	Author : Takeda.Toshiya
	Date   : 2008.04.10 -

	[ keyboard ]
*/

#include "keyboard.h"
#include "../ls244.h"
#include "../../fifo.h"

#define PHASE_RESET		-1
#define PHASE_IDLE		0
#define PHASE_SEND_START_H	1
#define PHASE_SEND_START_L	2
#define PHASE_SEND_BIT_7_H	3
#define PHASE_SEND_BIT_7_L	4
#define PHASE_SEND_BIT_6_H	5
#define PHASE_SEND_BIT_6_L	6
#define PHASE_SEND_BIT_5_H	7
#define PHASE_SEND_BIT_5_L	8
#define PHASE_SEND_BIT_4_H	9
#define PHASE_SEND_BIT_4_L	10
#define PHASE_SEND_BIT_3_H	11
#define PHASE_SEND_BIT_3_L	12
#define PHASE_SEND_BIT_2_H	13
#define PHASE_SEND_BIT_2_L	14
#define PHASE_SEND_BIT_1_H	15
#define PHASE_SEND_BIT_1_L	16
#define PHASE_SEND_BIT_0_H	17
#define PHASE_SEND_BIT_0_L	18
#define PHASE_SEND_COMMAND_H	19
#define PHASE_SEND_COMMAND_L	20
#define PHASE_SEND_PARITY_H	21
#define PHASE_SEND_PARITY_L	22
#define PHASE_SEND_FINISH	23
#define PHASE_SEND_WAIT_ACK	24
#define PHASE_RECV_START	30
#define PHASE_RECV_BIT_2	31
#define PHASE_RECV_BIT_1	32
#define PHASE_RECV_BIT_0	33
#define PHASE_RECV_PARITY	34
#define PHASE_RECV_ACK_H	35
#define PHASE_RECV_ACK_L	36

#define EVENT_DRIVE		0
#define EVENT_DATA		1
#define EVENT_ACK		2

static const uint8 key_table[256] = {
	0x00, 0x00, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x00, 0x00, 0xda, 0x0b, 0x1f, 0x1c, 0x1e, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xd9, 0xd8, 0x00,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x2a, 0x2b, 0x2c, 0x2d, 0xfd, 0x2f,
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0xd7, 0xd5, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x3b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5b, 0x5c, 0x5d, 0x5e, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8 key_shift_table[256] = {
	0x00, 0x00, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x00, 0x00, 0x00, 0x0b, 0x1f, 0x1c, 0x1e, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xd9, 0xd8, 0x00,
	0x00, 0x21, 0x22, 0xda, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x2a, 0x2b, 0x2c, 0x2d, 0xfd, 0x2f,
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0xd7, 0xd5, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x2b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x7c, 0x7d, 0x7e, 0x00,
	0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8 key_ctrl_table[256] = {
	0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x00, 0x00, 0xda, 0x1b, 0x1f, 0x1c, 0x1e, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xd9, 0xd8, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0x2a, 0x2b, 0x2c, 0x2d, 0xfd, 0x2f,
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0xd7, 0xd6, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9b, 0x9c, 0x9d, 0x9e, 0x00,
	0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8 key_ctrl_shift_table[256] = {
	0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x00, 0x00, 0xda, 0x1b, 0x1f, 0x1c, 0x1e, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xd9, 0xd8, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x2b, 0x2c, 0x2d, 0xfd, 0x2f,
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0xd7, 0xd6, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void KEYBOARD::initialize()
{
	key_stat = emu->key_buffer();
	key_buf = new FIFO(64);
	caps = true;
	register_frame_event(this);
}

void KEYBOARD::release()
{
	key_buf->release();
	delete key_buf;
}

void KEYBOARD::reset()
{
	key_buf->clear();
	
	phase = PHASE_RESET;
	drive();
	
	stc_clock = current_clock();
	stc = dc = false;
}

void KEYBOARD::write_signal(int id, uint32 data, uint32 mask)
{
	if(id == SIG_KEYBOARD_ACKC) {
		if(data & mask) {
			if(phase == PHASE_SEND_WAIT_ACK) {
				key_buf->read();
			}
		}
	} else if(id == SIG_KEYBOARD_STC) {
		bool old = stc;
		stc = ((data & mask) != 0);
		if(old && !stc) {
			stc_clock = current_clock();
		} else if(!old && stc) {
			switch(phase) {
			case PHASE_RESET:
				phase = PHASE_IDLE;
				drive();
				break;
			case PHASE_IDLE:
				if(passed_usec(stc_clock) < 7.5) {
					phase = PHASE_IDLE;
				} else {
					phase = PHASE_RECV_START;
				}
				drive();
				break;
			case PHASE_RECV_BIT_2:
			case PHASE_RECV_BIT_1:
			case PHASE_RECV_BIT_0:
			case PHASE_RECV_PARITY:
				if(passed_usec(stc_clock) < 17.5) {
					phase = PHASE_IDLE;
				}
				drive();
				break;
			}
		}
	} else if(id == SIG_KEYBOARD_DC) {
		dc = ((data & mask) != 0);
	}
}

void KEYBOARD::event_callback(int event_id, int err)
{
	if(event_id == EVENT_DRIVE) {
		drive();
	} else if(event_id == EVENT_DATA) {
		set_dk((send_data & 0x200) != 0);
		send_data <<= 1;
	} else if(event_id == EVENT_ACK) {
		set_dk(recv_ok);
	}
}

void KEYBOARD::event_frame()
{
	if(phase == PHASE_IDLE) {
		if(!key_buf->empty()) {
			bool command = false;
			send_data = (uint16)key_buf->read_not_remove(0);
			if((send_data & 0xf0) == 0xa0) {
				send_data &= 0x0f;
				send_data |= 0x90;
				command = true;
			} else if((send_data & 0xf0) == 0xd0) {
				send_data &= 0x0f;
				send_data |= 0xf0;
				command = true;
			}
			send_data <<= 2;
			send_data |= (command ? 2 : 0);
			int parity = 0;//1;
			if(send_data & 0x200) parity++;
			if(send_data & 0x100) parity++;
			if(send_data & 0x080) parity++;
			if(send_data & 0x040) parity++;
			if(send_data & 0x020) parity++;
			if(send_data & 0x010) parity++;
			if(send_data & 0x008) parity++;
			if(send_data & 0x004) parity++;
			if(send_data & 0x002) parity++;
			send_data |= (parity & 1);
			phase = PHASE_SEND_START_H;
			drive();
		}
	}
}

void KEYBOARD::drive()
{
	switch(phase) {
	case PHASE_RESET:
	case PHASE_IDLE:
		set_dk(false);
		set_stk(false);
		break;
	case PHASE_SEND_START_H:
		set_dk(false);
		set_stk(true);
		phase++;
		register_event(this, EVENT_DRIVE, 12.5, false, NULL);
		break;
	case PHASE_SEND_START_L:
		set_stk(false);
		phase++;
		register_event(this, EVENT_DATA, 32.0, false, NULL);
		register_event(this, EVENT_DRIVE, 32.5, false, NULL);
		break;
	case PHASE_SEND_BIT_7_H:
	case PHASE_SEND_BIT_6_H:
	case PHASE_SEND_BIT_5_H:
	case PHASE_SEND_BIT_4_H:
	case PHASE_SEND_BIT_3_H:
	case PHASE_SEND_BIT_2_H:
	case PHASE_SEND_BIT_1_H:
	case PHASE_SEND_BIT_0_H:
	case PHASE_SEND_COMMAND_H:
	case PHASE_SEND_PARITY_H:
		set_stk(true);
		phase++;
		register_event(this, EVENT_DRIVE, 17.5, false, NULL);
		break;
	case PHASE_SEND_BIT_7_L:
	case PHASE_SEND_BIT_6_L:
	case PHASE_SEND_BIT_5_L:
	case PHASE_SEND_BIT_4_L:
	case PHASE_SEND_BIT_3_L:
	case PHASE_SEND_BIT_2_L:
	case PHASE_SEND_BIT_1_L:
	case PHASE_SEND_BIT_0_L:
	case PHASE_SEND_COMMAND_L:
		set_stk(false);
		phase++;
		register_event(this, EVENT_DATA, 49.5, false, NULL);
		register_event(this, EVENT_DRIVE, 50.0, false, NULL);
		break;
	case PHASE_SEND_PARITY_L:
		set_stk(false);
		phase++;
		register_event(this, EVENT_DRIVE, 50.0, false, NULL);
		break;
	case PHASE_SEND_FINISH:
		set_dk(false);
		phase++;
		register_event(this, EVENT_DRIVE, 300.0, false, NULL);
		break;
	case PHASE_SEND_WAIT_ACK:
		phase = PHASE_IDLE;
		break;
	case PHASE_RECV_START:
		recv_data = 0;
		phase++;
		break;
	case PHASE_RECV_BIT_2:
		recv_data |= dc ? 4 : 0;
		phase++;
		break;
	case PHASE_RECV_BIT_1:
		recv_data |= dc ? 2 : 0;
		phase++;
		break;
	case PHASE_RECV_BIT_0:
		recv_data |= dc ? 1 : 0;
		phase++;
		break;
	case PHASE_RECV_PARITY:
		{
			int parity = 0;//1;
			if(recv_data & 4) parity++;
			if(recv_data & 2) parity++;
			if(recv_data & 1) parity++;
			recv_ok = ((parity & 1) == (dc ? 1 : 0));
			phase++;
			register_event(this, EVENT_ACK, 69.5, false, NULL);
			register_event(this, EVENT_DRIVE, 70.0, false, NULL);
		}
		break;
	case PHASE_RECV_ACK_H:
		set_stk(true);
		phase++;
		register_event(this, EVENT_DRIVE, 17.5, false, NULL);
		break;
	case PHASE_RECV_ACK_L:
		set_dk(false);
		set_stk(false);
		phase = PHASE_IDLE;
		break;
	}
}

void KEYBOARD::key_down(int code)
{
	if(code == 0x14) {
		caps = !caps;
	}
	bool shift = (key_stat[0x10] != 0);
	bool ctrl = (key_stat[0x11] != 0);
	
	if(ctrl && shift) {
		code = key_ctrl_shift_table[code];
	} else if(!ctrl && shift) {
		code = key_shift_table[code];
	} else if(ctrl && !shift) {
		code = key_ctrl_table[code];
	} else {
		code = key_table[code];
	}
	if(code != 0) {
		if(caps) {
			if(code >= 'a' && code <= 'z') {
				code += 'A' - 'a';
			} else if(code >= 'A' && code <= 'Z') {
				code += 'a' - 'A';
			}
		}
		key_buf->write(code);
	}
}

void KEYBOARD::key_up(int code)
{
}

void KEYBOARD::set_stk(bool value)
{
	d_ls244->write_signal(SIG_LS244_INPUT, value ? 0xffffffff : 0, 0x40);
	d_subcpu->write_signal(SIG_CPU_IRQ, value ? 0xffffffff : 0, 1);
}

void KEYBOARD::set_dk(bool value)
{
	d_ls244->write_signal(SIG_LS244_INPUT, value ? 0xffffffff : 0, 0x20);
}

#define STATE_VERSION	1

void KEYBOARD::save_state(FILEIO* state_fio)
{
	state_fio->FputUint32(STATE_VERSION);
	state_fio->FputInt32(this_device_id);
	
	key_buf->save_state((void *)state_fio);
	state_fio->FputInt32(phase);
	state_fio->FputUint16(send_data);
	state_fio->FputUint32(stc_clock);
	state_fio->FputUint8(recv_data);
	state_fio->FputBool(recv_ok);
	state_fio->FputBool(stc);
	state_fio->FputBool(dc);
	state_fio->FputBool(caps);
}

bool KEYBOARD::load_state(FILEIO* state_fio)
{
	if(state_fio->FgetUint32() != STATE_VERSION) {
		return false;
	}
	if(state_fio->FgetInt32() != this_device_id) {
		return false;
	}
	if(!key_buf->load_state((void *)state_fio)) {
		return false;
	}
	phase = state_fio->FgetInt32();
	send_data = state_fio->FgetUint16();
	stc_clock = state_fio->FgetUint32();
	recv_data = state_fio->FgetUint8();
	recv_ok = state_fio->FgetBool();
	stc = state_fio->FgetBool();
	dc = state_fio->FgetBool();
	caps = state_fio->FgetBool();
	return true;
}

